package other

import (
	"fmt"
	"testing"

	"tafexpr/parser"

	"github.com/antlr4-go/antlr/v4"
	"github.com/stretchr/testify/assert"
)

func _SetupLexer() {
	// Setup the input
	//is := antlr.NewInputStream("1 + 2 * 3")

	a := antlr.NewInputStream("asda$ase.asd")

	// Create the Lexer
	lexer := parser.NewTafexprLexer(a)
	fmt.Printf("lexer: %v\n", lexer)
	// Read all tokens
	for {
		t := lexer.NextToken()
		if t.GetTokenType() == antlr.TokenEOF {
			break
		}
		fmt.Printf("%s (%q)\n",
			lexer.SymbolicNames[t.GetTokenType()], t.GetText())
	}
}

func TestArithmetics(t *testing.T) {
	p := SetupParser()
	assert.Equal(t, true, p.Parse("1 + 2 + 3 * 5"))
}

func TestArithmeticsWithParenthesis(t *testing.T) {
	p := SetupParser()
	assert.Equal(t, true, p.Parse("1 + 2 + (3 * 5) * (2 + 3 * (9 * 21) + 2 * (2+3*(9*0+(8*0))))"))
}

func SetupParser() *TAFArgumentParser {
	p := &TAFArgumentParser{}
	return p
}

/*func TestRandomTokens(t *testing.T) {
	p := SetupParser()
	r := p.Parse("asdsd 123 asdas ss")
//	p.PrintTokens()
	assert.Equal(t, false, r)
}*/

func TestRandomStringBeforeVariableDefinition(t *testing.T) {
	p := SetupParser()
	r := p.Parse("asdsd$ad")
	//p.PrintTokens()
	assert.Equal(t, true, r)
}

func TestVariableDefinition(t *testing.T) {
	p := SetupParser()
	r := p.Parse("$myVar")

	assert.Equal(t, p.TokenExists("VARIABLE_NAME", "$myVar"), true)
	assert.Equal(t, p.GetTokensLength(), 1)
	//p.PrintTokens()
	assert.Equal(t, true, r)
}

func TestVariableJSONPathDefinition(t *testing.T) {
	p := SetupParser()
	p.PrintTokens()
	r := p.Parse("$myVar.myPath.Is.Good")
	p.PrintTokens()
	assert.Equal(t, p.GetTokensLength(), 1)
	assert.Equal(t, r, true)
	assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.myPath.Is.Good"), true)
	assert.Equal(t, true, r)
}

func TestVariableJSONPathDefinitionMultipleVars(t *testing.T) {
	p := SetupParser()
	//p.PrintTokens()
	r := p.Parse("$myVar.myPath.Is.Good + $myVar.myPath.Is.Good2 + $myVar.myPath.Is.Good3 - 2 - 3")
	//p.PrintTokens()
	assert.Equal(t, p.GetTokensLength(), 9)
	assert.Equal(t, r, true)
	assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.myPath.Is.Good"), true)
	assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.myPath.Is.Good2"), true)
	assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.myPath.Is.Good3"), true)
	assert.Equal(t, p.TokenExists("ADD", "+"), true)
	assert.Equal(t, p.TokenExists("ADD", "+"), true)
	assert.Equal(t, p.TokenExists("ADD", "+"), true)
	assert.Equal(t, p.TokenExists("SUB", "-"), true)
	assert.Equal(t, p.TokenExists("SUB", "-"), true)
	assert.Equal(t, p.TokenExists("INTEGER", "2"), true)
	assert.Equal(t, p.TokenExists("INTEGER", "3"), true)
	assert.Equal(t, true, r)
}

func TestVariableJSONPathWithIndexDefinition(t *testing.T) {
	p := SetupParser()
	//p.PrintTokens()
	r := p.Parse("$myVar.a[10].path")
	//p.PrintTokens()
	assert.Equal(t, r, true)
	//	assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.a[10].path"), true)
	assert.Equal(t, true, r)
}

func TestVariableJSONPathWithIndexDefinitionWithScalarList(t *testing.T) {
	p := SetupParser()
	p.PrintTokens()
	r := p.Parse("$myVar.a[10]")
	//p.PrintTokens()
	assert.Equal(t, p.GetTokensLength(), 4)
	assert.Equal(t, r, true)
	assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.a"), true)
	assert.Equal(t, p.TokenExists("INTEGER", "10"), true)
	assert.Equal(t, true, r)
}

func TestVariableJSONPathWithIndexDefinitionWithListAndPath(t *testing.T) {
	p := SetupParser()
	//p.PrintTokens()
	r := p.Parse("$myVar.a[10].path.path[10].x")
	//	p.PrintTokens()
	//	assert.Equal(t, p.GetTokensLength(), 1)
	assert.Equal(t, r, true)
	//assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.a[10].path.path[10].x"), true)
	assert.Equal(t, true, r)
}

/*func TestVariableJSONPathWithIndexDefinitionErroneous(t *testing.T) {
	p := SetupParser()
	p.PrintTokens()
	s := []string{"$myVar.a asd[10]", "$myVar.[10]", "$myVar.a[]"}

	for i := 0; i < len(s); i++ {
		r := p.Parse(s[0])
		//		assert.Equal(t, false, r)
	}
}*/

func TestVariableJSONPathWithIndexDefinitionWithListAndPathExpression(t *testing.T) {
	p := SetupParser()
	//p.PrintTokens()
	r := p.Parse("$myVar.a[1+2+3].path.path[1+2+3].x")
	//p.PrintTokens()
	assert.Equal(t, r, true)
	//assert.Equal(t, p.TokenExists("VARIABLE_PATH", "$myVar.a[10].path.path[10].x"), true)
	assert.Equal(t, true, r)
}

/*func TestIndexedVariableDefinition(t *testing.T) {
	p := SetupParser()
	r := p.Parse("$myVar[]")
	p.PrintTokens()
	assert.Equal(t, true, r)
}*/

/*func TestArithmeticsWithMissingOneRightParenthesis(t *testing.T) {
	p := SetupParser()
	r := p.Parse("1 + 2 + (3 * 5) * (2 + 3 * (9 * 21) + 2 * (2+3*(9*0+(8*0)))")
	assert.Equal(t, false, r)
}
/*



func TestVariableListDefinition(t *testing.T) {
	p := SetupParser()
	assert.Equal(t, true, p.Parse("$myVar[10]"))
}
*/
/*
func TestVariableListIndexExprDefinition(t *testing.T) {
	p := SetupParser()
	assert.Equal(t, true, p.Parse("$myVar[$myVar.x.y[10]]]"))
}
*/

func TestVariableJSONPathWithIndexedExpressionDefinition(t *testing.T) {
	p := SetupParser()
	r := p.Parse("$myVar.a[$myVar.var.var[10].x].path")
	//p.PrintTokens()
	assert.Equal(t, true, r)
}
